#importing the dataset
dataset = read.csv("50_Startups.csv")
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into training and test sets
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 4/5)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Multiple Linear Regression to the Training Set
regressor = lm(formula = Profit ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
dataset = read.csv("50_Startups.csv")
setwd("~/Downloads/_Machine Learning/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression")
#importing the dataset
dataset = read.csv("50_Startups.csv")
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into training and test sets
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 4/5)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Multiple Linear Regression to the Training Set
regressor = lm(formula = Profit ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regressor)
source('~/Downloads/_Machine Learning/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression/Multiple Linear Regression.R', echo=TRUE)
regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
setwd("~/Downloads/_Machine Learning/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 6 - Polynomial Regression/Polynomial_Regression")
dataset = read.csv("Position_Salaries.csv")
dataset = dataset[2:3]
View(dataset)
View(dataset)
View(dataset)
View(dataset)
regressor = lm(formula = Salary ~ Level,
data = dataset)
# Visualising the linear regression results
# install.packages("ggplot2")
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Position Level') +
ylab('Salary')
lin_reg = regressor
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
View(dataset)
poly_reg = lm(formula = Salary ~ .,
data = dataset)
View(poly_reg)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Position Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Position Level') +
ylab('Salary')
y_pred = predict(lin_reg, 6.5)
y_pred = predict(lin_reg, newdata = 6.5)
y_pred = predict(lin_reg, data.frame(Level = 6.5))
y_pred
y_pred_2 = predict(poly_reg, data.frame(Level = 6.5, Level2 = 6.5^2, Level3 = 6.5^3))
y_pred_2
setwd("~/Downloads/_Machine Learning/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)")
install.packages('e1071')
dataset = read.csv("Position_Salaries.csv")
dataset = dataset[2:3]
# Fitting SVR to the dataset
# install.packages('e1071')
library(e1071)
regressor = svm(formula = Salary ~ Level,
data = dataset,
type = 'eps-regression')
y_pred_2 = predict(regressor, data.frame(Level = 6.5)
y_pred_2 = predict(regressor, data.frame(Level = 6.5))
y_pred_2 = predict(regressor, data.frame(Level = 6.5))
y_pred = predict(regressor, data.frame(Level = 6.5))
y_pred
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (SVR)') +
xlab('Position Level') +
ylab('Salary')
install.packages('rpart')
dataset = read.csv("Position_Salaries.csv")
dataset = dataset[2:3]
library (rpart)
regressor = rpart(formula = Salary ~ Level,
data = dataset)
y_pred = regressor.predict(6.5)
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
regressor = rpart(formula = Salary ~ Level,
data = dataset,
control = rpart.control(minsplit = 1))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
regressor = rpart(formula = Salary ~ Level,
data = dataset,
control = rpart.control(minsplit = 10))
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
regressor = rpart(formula = Salary ~ Level,
data = dataset,
control = rpart.control(minsplit = 100))
regressor = rpart(formula = Salary ~ Level,
data = dataset,
control = rpart.control(minsplit = 100))
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
regressor = rpart(formula = Salary ~ Level,
data = dataset,
control = rpart.control(minsplit = 0.01))
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
regressor = rpart(formula = Salary ~ Level,
data = dataset,
control = rpart.control(minsplit = 1))
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualizing the Decision Tree Regression to the dataset
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
regressor = rpart(formula = Salary ~ Level,
data = dataset,
control = rpart.control(minsplit = 1))
y_pred = predict(regressor, data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Leve))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
setwd("~/Downloads/_Machine Learning/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 9 - Random Forest Regression")
install.packages('randomForest')
library (randomForest)
dataset = read.csv("Position_Salaries.csv")
dataset = dataset[2:3]
library (randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 100)
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 100)
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
y_pred = predict(regressor, data.frame(Level = 6.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 100)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 500)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
